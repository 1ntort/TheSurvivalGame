on load:
    tsg wait until nbts are loaded # @skignore
    
    set the tsg item named "menu item" to TheSurvivalGame_applyNBT("nether star", "menu item", {-TheSurvivalGame item NBTs::menu item}, true, "openMenu") # @skignore
    set the tsg item named "view level" to TheSurvivalGame_applyNBT("experience bottle", "view level", {-TheSurvivalGame item NBTs::view level}, true, "none", "none", "viewLevel") # @skignore
    set the tsg item named "locked vault" to TheSurvivalGame_applyNBT("barrier", "locked vault", {-TheSurvivalGame item NBTs::locked vault}, true) # @skignore
    set the tsg item named "prestige confirmation" to TheSurvivalGame_applyNBT("lime stained glass pane", "prestige confirmation", {-TheSurvivalGame item NBTs::prestige confirmation}, true, "none", "none", "prestigeConfirm") # @skignore
    set the tsg item named "prestige error" to TheSurvivalGame_applyNBT("red stained glass pane", "prestige error", {-TheSurvivalGame item NBTs::prestige error}, true) # @skignore
    
function TheSurvivalGame_rightClickEvent_openMenu(player: player):
    TheSurvivalGame_openUI_menu({_player}) # @skignore
    
function TheSurvivalGame_uiEvent_viewLevel(player: player, item name: string):
    TheSurvivalGame_openUI_viewLevel({_player}) # @skignore
    
function TheSurvivalGame_uiEvent_viewVaults(player: player, item name: string):
    TheSurvivalGame_openUI_viewVaults({_player}) # @skignore

function TheSurvivalGame_uiEvent_viewVault(player: player, item name: string):
    set {_id} to {_item name}
    replace every "vault" in {_id} with ""
    TheSurvivalGame_openUI_viewVault({_player}, {_id}) # @skignore

function TheSurvivalGame_uiEvent_prestige(player: player, item name: string):
    TheSurvivalGame_openUI_prestige({_player}) # @skignore

function TheSurvivalGame_uiEvent_prestigeConfirm(player: player, item name: string):
    close inventory of {_player}
    set {_uuid} to {_player}'s uuid
    
    set {_old prestiges} to {-TheSurvivalGame player data::%{_uuid}%::prestiges}
    set {_new prestiges} to {_old prestiges} + 1
    
    set {_old prestige points} to {-TheSurvivalGame player data::%{_uuid}%::prestige points}
    set {_new prestige points} to {_old prestige points} + 1
    
    set {-TheSurvivalGame player data::%{_uuid}%::woodcutting level} to 1
    set {-TheSurvivalGame player data::%{_uuid}%::woodcutting xp} to 0
    set {-TheSurvivalGame player data::%{_uuid}%::mining level} to 1
    set {-TheSurvivalGame player data::%{_uuid}%::mining xp} to 0
    set {-TheSurvivalGame player data::%{_uuid}%::farming level} to 1
    set {-TheSurvivalGame player data::%{_uuid}%::farming xp} to 0
    set {-TheSurvivalGame player data::%{_uuid}%::crafting level} to 1
    set {-TheSurvivalGame player data::%{_uuid}%::crafting xp} to 0
    
    set {-TheSurvivalGame player data::%{_uuid}%::prestiges} to {_new prestiges}
    set {-TheSurvivalGame player data::%{_uuid}%::prestige points} to {_new prestige points}
    
    broadcast "&8[&5!] &a%{_player}%&b has just prestiged! They now have &5%{_new prestiges}% prestiges&b!"

function TheSurvivalGame_generateItem_level(player: player, stat: string) :: item:
    set {_uuid} to {_player}'s uuid
    set {_xp} to {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp}
    {_xp} is set
    set {_level} to {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level}
    {_level} is set
    
    set {_max} to (the tsg xp required for level {_level}) abbreviated with tsg # @skignore
    set {_bar} to the tsg progress bar for level {_level} and xp {_xp} # @skignore
    set {_percent} to "%the tsg level percent for level {_level} and xp {_xp} rounded to 2 decimal places%%%" # @skignore
    
    if {_level} >= 25:
        set {_level NBT} to {-TheSurvivalGame item NBTs::%{_stat}% level}
        replace every "[LEVEL]" in {_level NBT} with "Max (25)"
        replace every "[XP]" in {_level NBT} with "3.85K"
        replace every "[MAX]" in {_level NBT} with "3.85K"
        replace every "[BAR]" in {_level NBT} with "&a||||||||||||||||||||||||||||||||||||||||||||||||||"
        replace every "[PERCENT]" in {_level NBT} with "100%%"
        
        return TheSurvivalGame_applyNBT("lime stained glass pane", "%{_stat}% level", {_level NBT}, true) # @skignore
        
    set {_level NBT} to {-TheSurvivalGame item NBTs::%{_stat}% level}
    replace every "[LEVEL]" in {_level NBT} with "%{_level}%"
    replace every "[XP]" in {_level NBT} with ({_xp} abbreviated with tsg) # @skignore
    replace every "[MAX]" in {_level NBT} with {_max}
    replace every "[BAR]" in {_level NBT} with {_bar}
    replace every "[PERCENT]" in {_level NBT} with {_percent}
    
    return TheSurvivalGame_applyNBT("lime stained glass pane", "%{_stat}% level", {_level NBT}, true) # @skignore

function TheSurvivalGame_generateItem_vaults(player: player) :: item:
    set {_vaults} to 0
    if {_player} has permission "thesurvivalgame.vault.1":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.2":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.3":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.4":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.5":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.6":
        add 1 to {_vaults}
    if {_player} has permission "thesurvivalgame.vault.7":
        add 1 to {_vaults}
    
    set {_vaults NBT} to {-TheSurvivalGame item NBTs::vaults}
    replace every "[VAULTS]" in {_vaults NBT} with "%{_vaults}%"
    
    return TheSurvivalGame_applyNBT("barrel", "vaults", {_vaults NBT}, true, "none", "none", "viewVaults") # @skignore

function TheSurvivalGame_generateItem_vault(player: player, id: integer) :: item:
    if {_player} has permission "thesurvivalgame.vault.%{_id}%":
        set {_vault NBT} to {-TheSurvivalGame item NBTs::vault}
        replace every "[VAULT]" in {_vault NBT} with "%{_id}%"
        return TheSurvivalGame_applyNBT("barrel", "vault%{_id}%", {_vault NBT}, true, "none", "none", "viewVault") # @skignore
    else:
        return {-TheSurvivalGame items::locked vault}

function TheSurvivalGame_generateItem_prestige(player: player) :: item:
    set {_uuid} to {_player}'s uuid
    set {_prestiges} to {-TheSurvivalGame player data::%{_uuid}%::prestiges}
    
    set {_prestige NBT} to {-TheSurvivalGame item NBTs::prestige}
    replace every "[PRESTIGE]" in {_prestige NBT} with "%{_prestiges}%"
    
    return TheSurvivalGame_applyNBT("end crystal", "prestige", {_prestige NBT}, true, "none", "none", "prestige") # @skignore