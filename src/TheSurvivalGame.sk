# The Survival Game
# Credits:
#    Skripting, Menu Designer:
#        | tort [<@1ntort> : discord] && [<@NotTort, @1ntort, @1ntort1> : minecraft]
#
# Required Addons:
#    Skript (https://github.com/SkriptLang/Skript)
#    SkBee (https://modrinth.com/project/a0tlbHZO)
#    SkBriggy (https://modrinth.com/project/EU37SyNH)
#    Skcrew (https://gitlab.crewpvp.xyz/skript/skcrew)
#    skript-reflect (https://github.com/SkriptLang/skript-reflect)
#    skript-yaml (https://github.com/Sashie/skript-yaml)
#
# Inspiration:
#    The Survival Game on Roblox (https://www.roblox.com/games/11156779721/The-Survival-Game)
#        | Main Idea, Resources, Armor
#    Hypixel (https://hypixel.net)
#        | World Menu Idea from their Skyblock Gamemode
#
# ONLY MODIFY PAST THIS POINT WHAT IS DEFINED IN "options:".
# EACH SKRIPT DEPENDS ON EACHOTHER TO RUN
# MODIFICATION WITHOUT KNOWING **EXACTLY** WHAT EVERYTHING
# WILL END UP BREAKING THINGS

options:
    skript path: plugins/Skript/scripts/TheSurvivalGame/
    plugin path: plugins/TheSurvivalGame/
    
    default config path: plugins/Skript/scripts/TheSurvivalGame/assets/config.yml
    public config path: plugins/TheSurvivalGame/config.yml
    
    save path: plugins/TheSurvivalGame/saves/
    save players path: plugins/TheSurvivalGame/saves/players/
    
    default player data path: plugins/Skript/scripts/TheSurvivalGame/assets/player data.yml
    
    item nbts path: plugins/Skript/scripts/TheSurvivalGame/assets/item nbts.txt

effect:
    patterns:
        (tsg|the[ ]survival[ ]game) (wait|delay) until (config:config|nbt:[item] nbt[s]) [(is|are)] loaded
    parse:
        if parse tags contain "config":
            set {_wait} to "config"
        else if parse tags contain "nbt":
            set {_wait} to "nbt"
        continue
    trigger:
        delay the current effect
        
        set {_continue} to false
        while {_continue} is false:
            if {-TheSurvivalGame loaded::%{_wait}%} is true:
                set {_continue} to true
            else:
                wait 2 ticks
        
        continue

on script load:
    set {_total start} to now
    tsg log "Starting TheSurvivalGame..." # @skignore
    
    set {_addon list::*} to "SkBee", "SkBriggy", "Skcrew", "skript-reflect", "skript-yaml"
    loop {_addon list::*}:
        if plugin loop-value is not enabled:
            tsg broadcast error "Addon %loop-value% is not enabled! See ""plugins/Skript/scripts/TheSurvivalGame/TheSurvivalGame.sk"" for more info." # @skignore
            stop
    
    clear {-TheSurvivalGame options::*}
    set {-TheSurvivalGame options::skript path} to "{@skript path}"
    set {-TheSurvivalGame options::plugin path} to "{@plugin path}"
    set {-TheSurvivalGame options::default config path} to "{@default config path}"
    set {-TheSurvivalGame options::public config path} to "{@public config path}"
    set {-TheSurvivalGame options::save path} to "{@save path}"
    set {-TheSurvivalGame options::save players path} to "{@save players path}"
    set {-TheSurvivalGame options::default player data path} to "{@default player data path}"
    set {-TheSurvivalGame options::item nbts path} to "{@item nbts path}"
    
    set {_config start} to now
    
    tsg log info "Loading config..." # @skignore
    set {_config return} to TheSurvivalGame_loadConfig() # @skignore
    if {_config return} is true:
        tsg log success "Successfully loaded config in %difference between {_config start} and now%!" # @skignore
        set {-TheSurvivalGame loaded::config} to true
    else:
        tsg log error "There was an error loading config." # @skignore
        stop
    
    set {_nbt start} to now
    
    tsg log info "Loading NBTs..." # @skignore
    set {_nbts} to content of file {-TheSurvivalGame options::item nbts path}
    set {_nbts split::*} to {_nbts} split at nl
    loop {_nbts split::*}:
        if first character of loop-value is "@":
            set {_line} to "%loop-value%"
            set {_line length} to length of {_line}
            
            set {_entry} to last ({_line length} - 1) characters of {_line}
            set {_entry length} to length of {_entry}
            
            set {_entry split::*} to {_entry} split at " = "
            
            set {_name} to {_entry split::1}
            set {_name length} to length of {_name}
            
            set {_nbt} to last ({_entry length} - {_name length} - 3) characters of {_entry}
            set {-TheSurvivalGame item NBTs::%{_name}%} to "%{_nbt}%"
    
    tsg log success "Successfully loaded item nbts in %difference between {_nbt start} and now%!" # @skignore
    set {-TheSurvivalGame loaded::nbt} to true
    
    loop all players:
        tsg log "Loading %loop-player%'s data..." # @skignore
        set {_data return} to TheSurvivalGame_loadData(loop-player) # @skignore
        if {_data return} is false:
            tsg log error "Unable to load %loop-player%'s data." # @skignore
        else:
            tsg log success "Successfully loaded %loop-player%'s data." # @skignore
    
    tsg log success "Successfully loaded TheSurvivalGame in %difference between {_total start} and now%!" # @skignore
    
on join:
    tsg log "%player% has joined the server on ""%client brand of player%"". (%player's uuid%)" # @skignore
    
    tsg log "Loading %player%'s data..." # @skignore
    set {_data return} to TheSurvivalGame_loadData(player) # @skignore
    if {_data return} is false:
        tsg log error "Unable to load %player%'s data." # @skignore
        kick player due to "There was an error loading your data. Please try again later."
    else:
        tsg log success "Successfully loaded %player%'s data." # @skignore
        
        set {_join message} to the tsg config value "join messages" # @skignore
        if {_join message} is true:
            set {_message} to tsg formatted "<success><prefix> <default>%player's displayname%<default> has joined the server! <extra>(%size of all players%/%the max player count%)" # @skignore
            set join message to {_message}
            play sound "minecraft:block.note_block.bell" to all players
        
        set {_lobby world} to the tsg config value "lobby world" # @skignore
        if {_lobby world} is not "none":
            set {_world} to world({_lobby world})
            if {_world} is set:
                teleport player to {_world}'s spawn location
                wait 2 ticks
                clear player's inventory
                set slot 4 of player's inventory to the tsg item named "lobby selector" # @skignore
                heal player
                feed player
                clear potion effects of player
            else:
                tsg log error "Invalid world for ""lobby world"" in config.yml: World does not exist." # @skignore
    
on disconnect:
    tsg log "%player% has left the server. (%player's uuid%)" # @skignore
    
    tsg log "Saving %player%'s data..." # @skignore
    set {_data return} to TheSurvivalGame_saveData(player) # @skignore
    if {_data return} is false:
        tsg log error "Unable to save %player%'s data." # @skignore
    else:
        tsg log success "Successfully saved %player%'s data." # @skignore
        
    set {_leave message} to the tsg config value "leave messages" # @skignore
    if {_leave message} is true:
        set {_message} to tsg formatted "<error><prefix> <default>%player's displayname%<default> has left the server! <extra>(%size of all players - 1%/%the max player count%)" # @skignore
        set leave message to {_message}
        play sound "minecraft:block.note_block.didgeridoo" to all players
    
on player drop:
    set {_name} to string tag "tsg name" of custom nbt of event-item stack
    if {_name} is "unknown":
        delete event-dropped item
    else:
        cancel event
    
on player inventory click:
    set {_static} to boolean tag "tsg static" of custom nbt of event-item
    if {_static} is true:
        cancel event
    
    set {_uuid} to player's uuid
    {-TheSurvivalGame player data::%{_uuid}%::*} is set
    
    set {_ui event} to string tag "tsg ui event" of custom nbt of event-item
    if {_ui event} is set:
        if {_ui event} is not "none":
            set {_section} to {-TheSurvivalGame ui events::%{_ui event}%}
            if {_section} is set:
                set {_name} to string tag "tsg name" of custom nbt of event-item
                run section {_section} sync with arguments player and {_name}
            else:
                tsg log error "An item with a UI Event was called, however there was no section attached. <extra>(%{_ui event}%)" # @skignore
                
on left click:
    set {_uuid} to player's uuid
    {-TheSurvivalGame player data::%{_uuid}%::*} is set
    
    set {_left click event} to string tag "tsg left click event" of custom nbt of event-item stack
    if {_left click event} is set:
        if {_left click event} is not "none":
            set {_section} to {-TheSurvivalGame left click events::%{_left click event}%}
            if {_section} is set:
                set {_name} to string tag "tsg name" of custom nbt of event-item
                run section {_section} sync with arguments player and {_name}
            else:
                tsg log error "An item with a Left Click Event was called, however there was no section attached. <extra>(%{_left click event}%)" # @skignore
                
on right click:
    set {_uuid} to player's uuid
    {-TheSurvivalGame player data::%{_uuid}%::*} is set
    
    set {_right click event} to string tag "tsg right click event" of custom nbt of event-item stack
    if {_right click event} is set:
        if {_right click event} is not "none":
            set {_section} to {-TheSurvivalGame right click events::%{_right click event}%}
            if {_section} is set:
                set {_name} to string tag "tsg name" of custom nbt of event-item
                run section {_section} sync with arguments player and {_name}
            else:
                tsg log error "An item with a Right Click Event was called, however there was no section attached. <extra>(%{_right click event}%)" # @skignore

on inventory close:
    set {_uuid} to player's uuid
    {-TheSurvivalGame player data::%{_uuid}%::*} is set
    
    set {_name} to uncolored name of event-inventory
    if {_name} contains "Vault #":
        slots of event-inventory is 45
        
        set {_id} to {_name}
        replace every "Vault #" in {_id} with ""
        
        set {_final} to "none"
        loop integers from 9 to 35:
            set {_slot} to loop-value
            set {_item} to slot {_slot} of event-inventory
            {_item} is set
            {_item} is not air
            
            set {_item name} to string tag "name" of custom nbt of {_item}
            if {_item name} is not set:
                set {_item name} to "unknown"
            
            set {_count} to item amount of {_item}
            
            set {_data} to "%{_slot}%=%{_item name}%|%{_count}%&"
            if {_final} is "none":
                set {_final} to {_data}
            else:
                set {_final} to "%{_final}%%{_data}%"
        
        if the last character of {_final} is "&":
            set {_final} to subtext of {_final} from character 1 to (the length of {_final} - 1)
        
        set {-TheSurvivalGame player data::%player's uuid%::vault%{_id}%} to {_final}

on food level change:
    cancel event

on send command list:
    set {_blocked} to "tsg-hidden-"
    set {_blocked length} to length of {_blocked}
    set {_blocked namespace} to "thesurvivalgame:tsg-hidden-"
    set {_blocked namespace length} to length of {_blocked namepsace}
    
    set {_new list::*} to command list where [first {_blocked length} characters of "%input%" is not {_blocked}]
    set command list to {_new list::*} where [first {_blocked namespace length} characters of "%input%" is not {_blocked namespace}]

on command:
    set {_command} to the command label
    set {_permission} to the permission of command {_command}
    if {_permission} contains "thesurvivalgame.developer":
        if tsg isnt developer: # @skignore
            cancel event
            tsg send error "Developer Mode is disabled in settings." to player

brig command tree /thesurvivalgame:thesurvivalgame: # @skignore
    permission: thesurvivalgame.version
    description: Handles all core functionality in TheSurvivalGame.
    usages: /thesurvivalgame <sub command>
    aliases: /tsg
    literal arg "reload":
        optional literal arg "section" using "config":
            permission: thesurvivalgame.reload
            trigger:
                if {_section} is not set:
                    loop all players:
                        TheSurvivalGame_saveData(loop-player) # @skignore
                    if player is set:
                        execute player command "/sk reload \TheSurvivalGame\"
                    else:
                        execute console command "/sk reload \TheSurvivalGame\"
                else if {_section} is "config":
                    set {_config return} to TheSurvivalGame_loadConfig() # @skignore
                    if {_config return} is true:
                        tsg send success "Successfully reloaded config! A full server restart may be required to fix suggestions on some commands." to player
                        tsg log success "&aSuccessfully reloaded config!"
                    else:
                        tsg log error "There was an error reloading config." to player
                        tsg log success "&cThere was an error reloading config."
        permission: thesurvivalgame.reload
    trigger:
        set {_message} to "Welcome to TheSurvivalGame"
        add "<newline>A unique skript for servers." to {_message}
        
        tsg send success {_message} to player