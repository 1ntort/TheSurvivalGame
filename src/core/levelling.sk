on load:
    set {-TheSurvivalGame abbreviations::*} to ",K,M,B,T,Qa,Qi,Sx,Sp,Oc,N,Dc,Ud,Dd,Td,Qad,Qid,Sxd,Spd,Ocd,Nd,Vg,Uvg,DVg,TVg,QaVg,QiVg,SxVg,SpVg,OcVg,NVg,Tgn,UTg,QaUvg,QiUvg,SxUvg,SpUvg,OcUvg,NUvg,DcUvg,UUvg,DUvg,TUvg,QtdUvg,QidUvg,SxdUvg,SpdUvg,OcdUvg,NdUvg,VUvg,DcNUvg,UNUvg,DcNUvg,TUUvg,QtdNUvg,QidNUvg,SxdNUvg,SpdNUvg,OcNUvg,NdNUvg,∞" split at ","

expression:
    patterns:
        [the] %number% abbreviated with (tsg|the[ ]survival[ ]game)
        [the] %number% (tsg|the[ ]survival[ ]game) abbreviated
        [the] (tsg|the[ ]survival[ ]game) [number] abbreviations
    return type: string
    parse:
        continue
    get:
        if matched pattern < 3:
            set {_number} to expr-1
            loop {-TheSurvivalGame abbreviations::*}:
                if {_number} < 10 ^ (loop-iteration * 3):
                    if loop-value is "∞":
                        return "∞"
                    return "%(floor(({_number}) / (10 ^ ((loop-iteration - 1) * 3) / 100)) / 100)%%loop-value%"
                return "?"
        else if matched pattern is 3:
            return {-TheSurvivalGame abbreviations::*}

expression:
    patterns:
        [the] (tsg|the[ ]survival[ ]game) [e]xp[erience] required [(to level up|until level up)] for [level] %number%
    return type: integer
    parse:
        continue
    get:
        set {_level} to floor(expr-1)
        if {_level} >= 25:
            return 0
        return floor({_level} * 150) + 100

expression:
    patterns:
        [the] (tsg|the[ ]survival[ ]game) (level|lvl) [completed] percent[age] for [level] %number% and [[e]xp[erience]] %number% [decimals:[rounded] to %integer% decimal[s] [places]]
    return type: number
    parse:
        if parse tags contains "decimals":
            set {_custom decimals} to true
        continue
    get:
        set {_level} to floor(expr-1)
        set {_xp} to floor(expr-2)
        set {_decimals} to 2
        
        if {_level} >= 25:
            return 100
        
        if {_custom decimals} is true:
            set {_decimals} to floor(expr-3)
        
        set {_decimals convert} to 10 ^ {_decimals}
        return floor(({_xp} / the tsg xp required for level {_level} * 100) * {_decimals convert}) / {_decimals convert}

expression:
    patterns:
        [the] (tsg|the[ ]survival[ ]game) (progress|level) bar for [level] %number% and [[e]xp[erience]] %number%
    return type: string
    parse:
        continue
    get:
        set {_level} to floor(expr-1)
        set {_xp} to floor(expr-2)
        
        if {_level} >= 25:
            return "&a%"|" repeated 50 times%"
    
        set {_percent} to the tsg level percent for level {_level} and xp {_xp} rounded to 2 decimal places
        set {_filled bars} to floor({_percent} / 2)
        set {_empty bars} to 50 - {_filled bars}
        
        set {_bar} to ""
        add "&a|" repeated {_filled bars} times to {_bar}
        add "&7|" repeated {_empty bars} times to {_bar}
        
        return {_bar}

expression:
    patterns:
        [the] (tsg|the[ ]survival[ ]game) [stat] %string% (level|lvl) (for|of) %player%
        [the] (tsg|the[ ]survival[ ]game) [stat] %string% [e]xp[erience] (for|of) %player%
    return type: integer
    parse:
        continue
    get:
        set {_stat} to expr-1
        set {_player} to expr-2
        set {_uuid} to {_player}'s uuid
        
        if (matched pattern) is 1:
            set {_level} to {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level}
            return {_level}
        else if (matched pattern) is 2:
            set {_xp} to {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp}
            return {_xp}
    add:
        set {_stat} to expr-1
        set {_player} to expr-2
        
        set {_old level} to the tsg {_stat} level of {_player}
        {_old level} is set
        {_old level} < 25
        
        if (matched pattern) is 1:
            set {_new level} to {_old level} + floor(change value)
            set the tsg {_stat} level of {_player} to {_new level}
        else if (matched pattern) is 2:
            set {_old xp} to the tsg {_stat} xp of {_player}
            set {_new xp} to {_old xp} + floor(change value)
            
            set {_new level} to {_old level}
            
            set {_next xp} to the tsg xp required for level {_new level}
            while {_new xp} > {_next xp}:
                add 1 to {_new level}
                subtract {_next xp} from {_new xp}
                set {_next xp} to the tsg xp required for level {_new level}
            
            set the tsg {_stat} level of {_player} to {_new level}
            set the tsg {_stat} xp of {_player} to {_new xp}
    set:
        set {_stat} to expr-1
        set {_player} to expr-2
        set {_uuid} to {_player}'s uuid
        
        if (matched pattern) is 1:
            set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level} to floor(change value)
            set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp} to 0
        else if (matched pattern) is 2:
            set {_new xp} to floor(change value)
            set {_new level} to {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level}
            
            set {_next xp} to the tsg xp required for level {_new level}
            while {_new xp} > {_next xp}:
                add 1 to {_new level}
                subtract {_next xp} from {_new xp}
                set {_next xp} to the tsg xp required for level {_new level}
            
            set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level} to {_new level}
            set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp} to {_new xp}
    remove:
        set {_stat} to expr-1
        set {_player} to expr-2
        
        if (matched pattern) is 1:
            add (0 - floor(change value)) to the tsg {_stat} level of {_player}
        else if (matched pattern) is 2:
            add (0 - floor(change value)) to the tsg {_stat} xp of {_player}
    delete:
        set {_stat} to expr-1
        set {_player} to expr-2
        
        set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level} to 0
        set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp} to 0
    reset:
        set {_stat} to expr-1
        set {_player} to expr-2
        
        set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% level} to 0
        set {-TheSurvivalGame player data::%{_uuid}%::%{_stat}% xp} to 0