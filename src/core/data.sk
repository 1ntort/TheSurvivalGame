function TheSurvivalGame_setupData() :: boolean:
    set {_default path} to {-TheSurvivalGame options::default player data path}
    set {_default file} to file path {_default path}
    
    if {_default file} is not a file:
        TheSurvivalGame_buildMessage_critical("Invalid path for ""default player data path"" in ""data.sk""; Path is either incorrect or missing. (%{-TheSurvivalGame options::default player data path}%)") # @skignore
        return false
    
    if yaml "TheSurvivalGame default player data" is loaded:
        unload yaml "TheSurvivalGame default player data"
    
    load yaml {_default path} as "TheSurvivalGame default player data"
    if yaml "TheSurvivalGame default player data" is empty:
        TheSurvivalGame_buildMessage_critical("""default player data path"" is empty.") # @skignore
        return false
    
    return true

function TheSurvivalGame_loadData(player: player) :: boolean:
    set {_uuid} to {_player}'s uuid
    if {-TheSurvivalGame player data::%{_uuid}%::*} is set:
        tsg log "%{_player}%'s data already exists. Reloading data..." # @skignore
        TheSurvivalGame_saveData({_player})
    
    set {_data path} to "%{-TheSurvivalGame options::save players path}%%{_uuid}%.yml"
    set {_data file} to file path {_data path}
    
    set {_default path} to {-TheSurvivalGame options::default player data path}
    set {_default file} to file path {_default path}
    
    set {_is default} to false
    if {_data file} is not a file:
        sync copy {_default file} to {_data file}
        set {_is default} to true
    
    set {_yaml id} to "TheSurvivalGame player data %{_uuid}%"
    load yaml {_data path} as {_yaml id}
    
    if {_is default} is false:
        set {_default nodes::*} to all yaml nodes of "TheSurvivalGame default player data"
        loop {_default nodes::*}:
            if yaml path loop-value in {_yaml id} does not exist:
                set yaml value loop-value in {_yaml id} to yaml value loop-value in "TheSurvivalGame default player data" without string checks
        
        loop all yaml nodes in {_yaml id}:
            if yaml path loop-value in "TheSurvivalGame default player data" does not exist:
                delete yaml value loop-value in {_yaml id}
        
                
    clear {-TheSurvivalGame player data::%{_uuid}%::*}
    set yaml value "username" in {_yaml id} to "%{_player}%"
    loop all yaml nodes in {_yaml id}:
        set {-TheSurvivalGame player data::%{_uuid}%::%loop-value%} to yaml value loop-value in {_yaml id} without string checks
    
    return true

function TheSurvivalGame_saveData(player: player) :: boolean:
    set {_uuid} to {_player}'s uuid
    set {_yaml id} to "TheSurvivalGame player data %{_uuid}%"
    if {-TheSurvivalGame config::saves} is true:
        set {_data path} to "%{-TheSurvivalGame options::save players path}%%{_uuid}%.yml"
        set {_data file} to file path {_data path}
        
        if yaml {_yaml id} is not loaded:
            return false
        
        loop {-TheSurvivalGame player data::%{_uuid}%::*}:
            set yaml value loop-index in {_yaml id} to loop-value
        
        save yaml {_yaml id} without extra lines between nodes
         
    unload yaml {_yaml id}
    delete {-TheSurvivalGame player data::%{_uuid}%::*}
    delete {-TheSurvivalGame player data temp::%{_uuid}%::*}
    return true

expression:
    patterns:
        [the] (tsg|the[ ]survival[ ]game) [temp:temp[orary]] data [(entry|value|index) [at]] %string% for %player%
    parse:
        if parse tags contains "temp":
            set {_temp} to true
        continue
    get:
        set {_index} to expr-1
        set {_player} to expr-2
        set {_uuid} to {_player}'s uuid
        
        if {_temp} is true:
            set {_data} to {-TheSurvivalGame player data temp::%{_uuid}%::%{_index}%}
            return {_data}
        else:
            set {_data} to {-TheSurvivalGame player data::%{_uuid}%::%{_index}%}
            return {_data}
    set:
        set {_index} to expr-1
        set {_player} to expr-2
        set {_uuid} to {_player}'s uuid
        
        if {_temp} is true:
            set {-TheSurvivalGame player data temp::%{_uuid}%::%{_index}%} to change value
        else:
            set {-TheSurvivalGame player data::%{_uuid}%::%{_index}%} to change value